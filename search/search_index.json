{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TweetBrain What's going on in your head? Send us your twitter, and we'll let you know! This is TweetBrain's main app. This Web App is created as a part of a WebJam at the Information and Computer Science Student Council in Univeristy of California, Irvine . \ud83c\udfae Join our Discord ! What is TweetBrain? \ud83d\udc26\ud83e\udde0 TweetBrain analyzes your Twitter to make an educated guess about who you are. In this simple implementation of TweetBrain, we guess a song that you might like. You can either use our API or our Web interface. ICSSC Web Jam 2020 Our official team members are: RJ Nathan Ryan Cam In the spirit of Hacktoberfest and Open Source, we opened up our documentation ( /docs ) to the public, for them to contribute their resources for learning React. These contributors did not add, mutate, or remove any of our source code from the project, and can be verified from their pull requests.","title":"TweetBrain"},{"location":"#tweetbrain","text":"What's going on in your head? Send us your twitter, and we'll let you know! This is TweetBrain's main app. This Web App is created as a part of a WebJam at the Information and Computer Science Student Council in Univeristy of California, Irvine . \ud83c\udfae Join our Discord !","title":"TweetBrain"},{"location":"#what-is-tweetbrain","text":"\ud83d\udc26\ud83e\udde0 TweetBrain analyzes your Twitter to make an educated guess about who you are. In this simple implementation of TweetBrain, we guess a song that you might like. You can either use our API or our Web interface.","title":"What is TweetBrain?"},{"location":"#icssc-web-jam-2020","text":"Our official team members are: RJ Nathan Ryan Cam In the spirit of Hacktoberfest and Open Source, we opened up our documentation ( /docs ) to the public, for them to contribute their resources for learning React. These contributors did not add, mutate, or remove any of our source code from the project, and can be verified from their pull requests.","title":"ICSSC Web Jam 2020"},{"location":"contributing/","text":"Contributing Frontend vs Backend \ud83c\udfe0 Below is the structure of our project. \u2514\u2500\u2500\u2500tweetbrain \u251c\u2500\u2500\u2500backend \u2502 \u2514\u2500\u2500\u2500app \u2514\u2500\u2500\u2500frontend \u2514\u2500\u2500\u2500src Backend \u2692 The heavy work is done here. \u2514\u2500\u2500\u2500tweetbrain \u2514\u2500\u2500\u2500backend We are using a Python web framework called Fast API which is great for quickly creating Web APIs, including documentation. \ud83e\udde0 Learn more about Fast API All configuration files (e.g. requirements.txt ) are within tweetbrain/backend , with the Fast API files within tweetbrain/backend/app . For information about contributing to the backend Front End \u2728 The pretty work is done here. \u2514\u2500\u2500\u2500tweetbrain \u2514\u2500\u2500\u2500frontend We are using React to develop the front end (no specific framework chosen). \ud83e\udde0 Learn more about React All configuation files (e.g. package.json ) are in tweetbrain/frontend , with the React.js files within tweetbrain/frontend/src .","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#frontend-vs-backend","text":"\ud83c\udfe0 Below is the structure of our project. \u2514\u2500\u2500\u2500tweetbrain \u251c\u2500\u2500\u2500backend \u2502 \u2514\u2500\u2500\u2500app \u2514\u2500\u2500\u2500frontend \u2514\u2500\u2500\u2500src","title":"Frontend vs Backend"},{"location":"contributing/#backend","text":"\u2692 The heavy work is done here. \u2514\u2500\u2500\u2500tweetbrain \u2514\u2500\u2500\u2500backend We are using a Python web framework called Fast API which is great for quickly creating Web APIs, including documentation. \ud83e\udde0 Learn more about Fast API All configuration files (e.g. requirements.txt ) are within tweetbrain/backend , with the Fast API files within tweetbrain/backend/app . For information about contributing to the backend","title":"Backend"},{"location":"contributing/#front-end","text":"\u2728 The pretty work is done here. \u2514\u2500\u2500\u2500tweetbrain \u2514\u2500\u2500\u2500frontend We are using React to develop the front end (no specific framework chosen). \ud83e\udde0 Learn more about React All configuation files (e.g. package.json ) are in tweetbrain/frontend , with the React.js files within tweetbrain/frontend/src .","title":"Front End"},{"location":"backend/fastapi/","text":"Fast API \ud83d\udcc3 Documentation is here . Highly recommend reading the documentation, this is one of the best documented new tools out there (and not too intimating \ud83d\ude0a). Cool links These links are helpful for learning React Beginner tutorials Intro to Fast API - 25 min","title":"Fast API"},{"location":"backend/fastapi/#fast-api","text":"\ud83d\udcc3 Documentation is here . Highly recommend reading the documentation, this is one of the best documented new tools out there (and not too intimating \ud83d\ude0a).","title":"Fast API"},{"location":"backend/fastapi/#cool-links","text":"These links are helpful for learning React","title":"Cool links"},{"location":"backend/fastapi/#beginner-tutorials","text":"Intro to Fast API - 25 min","title":"Beginner tutorials"},{"location":"backend/start-here/","text":"Start Here Structure The backend is divided into three parts. \u2514\u2500\u2500\u2500backend \u2514\u2500\u2500\u2500app <-- Our main Backend App (Fast API) \u251c\u2500\u2500\u2500songs <-- routes for our Song matching API \u251c\u2500\u2500\u2500genius <-- Objects and tests for Genius API \u2514\u2500\u2500\u2500twitter <-- Objects and tests for Twitter API genius and twitter are called within songs . app - Fast API Our main app uses the Fast API Python Web Framework Info here songs - Fast API This portion of the application holds all our routes for our Song API endpoints. Our objects from genius and twitter are used within songs to return songs which match a user's timeline (timeline = list of tweets). genius - lyricgenius We are using a Python wrapper for Genius's API called lyricgenius \ud83e\udde0 find out more about lyricgenius twitter - tweepy We are using a Python wrapper for Twitter's API called tweepy \ud83e\udde0 find out more about tweepy In addition to that, we are using nltk to process the tweets and figure out the most common words from a user's timeline. Quick Start Below are the instructions for running Fast API locally Installation \ud83d\udc69\u200d\ud83d\udc67 Clone repository git clone https://github.com/tweetbrain/you cd you Navigate to tweetbrain/backend cd tweetbrain cd backend You should find yourself here: \u2514\u2500\u2500\u2500tweetbrain \u2514\u2500\u2500\u2500backend <-- you are here \ud83d\udc0d Create Python virtual environment There are a good amount of depencies for this project -- it will be good practice to use a virtual environment, albeit not necessary. macOS/Linux python3 -m venv env Windows Command Line python -m venv env Windows Powershell python -m venv env The last argument is the location to create the virtual environment. Generally, you can just create this in your project and call it env. \u2705 Activate virtual environment macOS/Linux source env/bin/activate Windows Command Line .\\env\\Scripts\\activate.bat Windows Powershell .\\env\\Scripts\\activate.ps1 \ud83d\udce6 Navigate to the repository folder and install packages python -m pip install -r requirements.txt Configuration \ud83d\udd10 This portion provides authentication information, which is NOT in our repository Method 1: secrets.json \ud83d\udcbe Those who are a part of our Web Jam team have access to a secrets.json file. This is the simplest way -- even if you don't have this file, you can make your own with the same name. Download that file, and paste it within tweetbrain/backend : \u2514\u2500\u2500\u2500tweetbrain \u2514\u2500\u2500\u2500backend <-- paste secrets.json within here \u2514\u2500\u2500\u2500secrets.json Method 2: Set environmental variables \ud83c\udf33 If you do not have our json file, or if you cannot use it for some reason, you will need to write environmental variables within your terminal. These variables must be made in the terminal/shell where your virtual environment is running The environmental variables are specified within tweetbrain/backend/config.py . To set environmental variables, follow these instructions: macOS/Linux export CONSUMER_KEY = your_consumer_key export CONSUMER_SECRET = your_consumer_secret export ACCESS_TOKEN = your_access_token export ACCESS_SECRET = your_access_secret Windows Command Line set CONSUMER_KEY = your_consumer_key set CONSUMER_SECRET = your_consumer_secret set ACCESS_TOKEN = your_access_token set ACCESS_SECRET = your_access_secret Windows Powershell $env:CONSUMER_KEY = \"your_consumer_key\" $env:CONSUMER_SECRET = \"your_consumer_secret\" $env:ACCESS_TOKEN = \"your_access_token\" $env:ACCESS_SECRET = \"your_access_secret\" Genius API Tokens macOS/Linux export GENIUS_ACCESS_TOKEN=your_genius_access_token Windows Command Line set GENIUS_ACCESS_TOKEN=your_genius_access_token Windows Powershell $env:GENIUS_ACCESS_TOKEN=\"your_genius_access_token\" Running the Backend API \ud83e\udd84 Run Fast API using uvicorn Run uvicorn. uvicorn app.main:app --reload You\u2019ll see output similar to this: \u2190[32mINFO\u2190[0m: Uvicorn running on \u2190[1mhttp://127.0.0.1:8000\u2190[0m (Press CTRL+C to quit) \u2190[32mINFO\u2190[0m: Started reloader process [\u2190[36m\u2190[1m38240\u2190[0m] using \u2190[36m\u2190[1mstatreload\u2190[0m \u2190[32mINFO\u2190[0m: Started server process [\u2190[36m13020\u2190[0m] \u2190[32mINFO\u2190[0m: Waiting for application startup. \u2190[32mINFO\u2190[0m: Application startup complete. donezo","title":"Start Here"},{"location":"backend/start-here/#start-here","text":"","title":"Start Here"},{"location":"backend/start-here/#structure","text":"The backend is divided into three parts. \u2514\u2500\u2500\u2500backend \u2514\u2500\u2500\u2500app <-- Our main Backend App (Fast API) \u251c\u2500\u2500\u2500songs <-- routes for our Song matching API \u251c\u2500\u2500\u2500genius <-- Objects and tests for Genius API \u2514\u2500\u2500\u2500twitter <-- Objects and tests for Twitter API genius and twitter are called within songs .","title":"Structure"},{"location":"backend/start-here/#app-fast-api","text":"Our main app uses the Fast API Python Web Framework Info here","title":"app - Fast API"},{"location":"backend/start-here/#songs-fast-api","text":"This portion of the application holds all our routes for our Song API endpoints. Our objects from genius and twitter are used within songs to return songs which match a user's timeline (timeline = list of tweets).","title":"songs - Fast API"},{"location":"backend/start-here/#genius-lyricgenius","text":"We are using a Python wrapper for Genius's API called lyricgenius \ud83e\udde0 find out more about lyricgenius","title":"genius - lyricgenius"},{"location":"backend/start-here/#twitter-tweepy","text":"We are using a Python wrapper for Twitter's API called tweepy \ud83e\udde0 find out more about tweepy In addition to that, we are using nltk to process the tweets and figure out the most common words from a user's timeline.","title":"twitter - tweepy"},{"location":"backend/start-here/#quick-start","text":"Below are the instructions for running Fast API locally","title":"Quick Start"},{"location":"backend/start-here/#installation","text":"\ud83d\udc69\u200d\ud83d\udc67 Clone repository git clone https://github.com/tweetbrain/you cd you Navigate to tweetbrain/backend cd tweetbrain cd backend You should find yourself here: \u2514\u2500\u2500\u2500tweetbrain \u2514\u2500\u2500\u2500backend <-- you are here \ud83d\udc0d Create Python virtual environment There are a good amount of depencies for this project -- it will be good practice to use a virtual environment, albeit not necessary. macOS/Linux python3 -m venv env Windows Command Line python -m venv env Windows Powershell python -m venv env The last argument is the location to create the virtual environment. Generally, you can just create this in your project and call it env. \u2705 Activate virtual environment macOS/Linux source env/bin/activate Windows Command Line .\\env\\Scripts\\activate.bat Windows Powershell .\\env\\Scripts\\activate.ps1 \ud83d\udce6 Navigate to the repository folder and install packages python -m pip install -r requirements.txt","title":"Installation"},{"location":"backend/start-here/#configuration","text":"\ud83d\udd10 This portion provides authentication information, which is NOT in our repository","title":"Configuration"},{"location":"backend/start-here/#method-1-secretsjson","text":"\ud83d\udcbe Those who are a part of our Web Jam team have access to a secrets.json file. This is the simplest way -- even if you don't have this file, you can make your own with the same name. Download that file, and paste it within tweetbrain/backend : \u2514\u2500\u2500\u2500tweetbrain \u2514\u2500\u2500\u2500backend <-- paste secrets.json within here \u2514\u2500\u2500\u2500secrets.json","title":"Method 1: secrets.json"},{"location":"backend/start-here/#method-2-set-environmental-variables","text":"\ud83c\udf33 If you do not have our json file, or if you cannot use it for some reason, you will need to write environmental variables within your terminal. These variables must be made in the terminal/shell where your virtual environment is running The environmental variables are specified within tweetbrain/backend/config.py . To set environmental variables, follow these instructions: macOS/Linux export CONSUMER_KEY = your_consumer_key export CONSUMER_SECRET = your_consumer_secret export ACCESS_TOKEN = your_access_token export ACCESS_SECRET = your_access_secret Windows Command Line set CONSUMER_KEY = your_consumer_key set CONSUMER_SECRET = your_consumer_secret set ACCESS_TOKEN = your_access_token set ACCESS_SECRET = your_access_secret Windows Powershell $env:CONSUMER_KEY = \"your_consumer_key\" $env:CONSUMER_SECRET = \"your_consumer_secret\" $env:ACCESS_TOKEN = \"your_access_token\" $env:ACCESS_SECRET = \"your_access_secret\" Genius API Tokens macOS/Linux export GENIUS_ACCESS_TOKEN=your_genius_access_token Windows Command Line set GENIUS_ACCESS_TOKEN=your_genius_access_token Windows Powershell $env:GENIUS_ACCESS_TOKEN=\"your_genius_access_token\"","title":"Method 2: Set environmental variables"},{"location":"backend/start-here/#running-the-backend-api","text":"\ud83e\udd84 Run Fast API using uvicorn Run uvicorn. uvicorn app.main:app --reload You\u2019ll see output similar to this: \u2190[32mINFO\u2190[0m: Uvicorn running on \u2190[1mhttp://127.0.0.1:8000\u2190[0m (Press CTRL+C to quit) \u2190[32mINFO\u2190[0m: Started reloader process [\u2190[36m\u2190[1m38240\u2190[0m] using \u2190[36m\u2190[1mstatreload\u2190[0m \u2190[32mINFO\u2190[0m: Started server process [\u2190[36m13020\u2190[0m] \u2190[32mINFO\u2190[0m: Waiting for application startup. \u2190[32mINFO\u2190[0m: Application startup complete. donezo","title":"Running the Backend API"},{"location":"frontend/react/","text":"React For intermediate and Experienced individuals it is better to start reading Documentation to get a quick grasp of the technology For the veterans :bearded_person: :point_down: \ud83d\udcc3 Documentation is here :fire: Cool links \ud83d\ude0e These links are helpful for learning React Video Tutorials \ud83d\udcfd Net Ninja - known for his web development series on youtube make sure to definitely check out first if you are a beginner React + Redux + Firebase - 263 mins Traversy Media - Crash Course React Crash Course - 60 mins Dev Ed - known for his humorous method of teaching try him out Intro to React - 60 mins SimpleTut - React + Node.js - 50 mins freeCodeCamp.org - React - 305 mins Blogs to Follow \ud83d\udcd6 Introduction to web development with React 5 part React starter kit tutorial The Beginner's Guide to React Intro to React testing library Misc Projects and Components Updates and News Learn to build some great UI Flavio Copes Blog - React Tutorials Overreacted by Dan Abramov A Complete Guide to useEffect Writing Resilient Components Useful React Components and Libraries React + Typescript Cheatsheet","title":"React"},{"location":"frontend/react/#react","text":"For intermediate and Experienced individuals it is better to start reading Documentation to get a quick grasp of the technology For the veterans :bearded_person: :point_down: \ud83d\udcc3 Documentation is here :fire:","title":"React"},{"location":"frontend/react/#cool-links","text":"These links are helpful for learning React","title":"Cool links \ud83d\ude0e"},{"location":"frontend/react/#video-tutorials","text":"Net Ninja - known for his web development series on youtube make sure to definitely check out first if you are a beginner React + Redux + Firebase - 263 mins Traversy Media - Crash Course React Crash Course - 60 mins Dev Ed - known for his humorous method of teaching try him out Intro to React - 60 mins SimpleTut - React + Node.js - 50 mins freeCodeCamp.org - React - 305 mins","title":"Video Tutorials \ud83d\udcfd"},{"location":"frontend/react/#blogs-to-follow","text":"Introduction to web development with React 5 part React starter kit tutorial The Beginner's Guide to React Intro to React testing library Misc Projects and Components Updates and News Learn to build some great UI Flavio Copes Blog - React Tutorials Overreacted by Dan Abramov A Complete Guide to useEffect Writing Resilient Components Useful React Components and Libraries React + Typescript Cheatsheet","title":"Blogs to Follow \ud83d\udcd6"},{"location":"frontend/start-here/","text":"General React notes/tips for beginners: Always choose functional components over class components. Especially now that React hooks exist and offer everything that class components do (ie using state, lifecycle methods). Higher order components (HOCs) will be a big help with creating reusable components and offer a great way to share logic without repeating in different parts of your app. Start using PropTypes from the beginning All JSX/component attributes/props should be on a new line. JSX/React components are self closing, utilize this feature when possible. Props should be destructured for easier readability and cleaner code (https://medium.freecodecamp.org/the-basics-of-destructuring-props-in-react-a196696f5477) Make components as small as possible. Vscode react extensions (keyboard shortcuts help to scaffold components faster, https://marketplace.visualstudio.com/items?itemName=xabikos.ReactSnippets) and speed up development.","title":"Start here"}]}